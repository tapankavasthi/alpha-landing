slug: "docker"
name: "Docker"
description_md: |
  In this challenge, you'll build a toy Docker implementation that can pull an
  image from [Docker Hub](https://hub.docker.com/) and execute commands in it.
  Along the way, you'll learn about
  [chroot](https://en.wikipedia.org/wiki/Chroot), [kernel
  namespaces](https://en.wikipedia.org/wiki/Linux_namespaces), the [docker
  registry API](https://docs.docker.com/registry/spec/api/) and much more.

supported_languages: ["go", "nim"]
starter_repos:
  go: https://github.com/codecrafters-io/docker-starter-go
  nim: https://github.com/codecrafters-io/docker-starter-nim
  
marketing_intro_md: |
  In this challenge, you'll build a toy Docker implementation that can pull an
  image from [Docker Hub](https://hub.docker.com/) and execute commands in it.
  Along the way, you'll learn about
  [chroot](https://en.wikipedia.org/wiki/Chroot), [kernel
  namespaces](https://en.wikipedia.org/wiki/Linux_namespaces), the [docker
  registry API](https://docs.docker.com/registry/spec/api/) and much more.

stages:
  - slug: "init"
    name: "Execute a program"
    description_md: |
      In the first couple of stages of this challenge, you'll be using
      [`docker-explorer`](https://github.com/codecrafters-io/docker-explorer), a
      custom test program that exposes a few commands like `echo` and `ls`.

      [Follow the instructions
      here](https://github.com/codecrafters-io/docker-explorer) to download the
      program to your machine. The program must be accessible at
      `/usr/local/bin/docker-explorer`.

      In the first stage, your task is to implement a very basic version of `docker
      run` that will be executed like this:

      ```
      your_program run <some_image> <command> <arg1> <arg2>
      ```

      (This is supposed to mimic the `docker run` command)

      Don't worry about pulling a docker image for now, just execute a program
      on your local machine and print its output. In this stage, the tester will
      use `/usr/local/bin/docker-explorer` as the command.

      We'd like to make the first stage easy to pass, so we've included steps on
      how to pass this stage in the readme.

    marketing_md: |
      In this stage, you'll execute a program using `fork` + `exec`.

  - slug: "stdio"
    name: "Wireup stdout & stderr"
    description_md: |
      In this stage, you'll need to pipe the program's stdout and stderr to the
      parent process.

      If you've got any logs or print statements in your code, make sure to remove
      them. The tester can't differentiate between debug logs and the actual
      output!

      Just like the previous stage, the tester will run your program like this: 

      ```
      your_program run <some_image> <command> <arg1> <arg2>
      ```

      `<command>` will always be `/usr/local/bin/docker-explorer` for now.

    marketing_md: |
      In this stage, you'll relay the child program's stdout & stderr to the
      parent process.

  - slug: "exit_code"
    name: "Handle exit codes"
    description_md: |
      In this stage, you'll need to relay the program's exit code to the parent
      process.

      If the program you're executing exits with exit code 1, your program
      should exit with exit code 1 too.

      To test this behaviour locally, you could use the `echo` + `echo_stderr`
      commands that `docker-explorer` exposes. Run `docker-explorer --help` to
      view usage.

      Just like the previous stage, the tester will run your program like this: 

      ```
      your_program run <some_image> <command> <arg1> <arg2>
      ```

      `<command>` will always be `/usr/local/bin/docker-explorer` for now.

    marketing_md: |
      In this stage, you'll wait for the child program's exit code and exit with
      it.

  - slug: "fs_isolation"
    name: "Filesystem isolation"
    description_md: |
      In the previous stage, we executed a program that existed locally on our
      machine. This program had write access to the whole filesystem, which
      means that it could do **dangerous** things!

      In this stage, you'll use [chroot](https://en.wikipedia.org/wiki/Chroot)
      to ensure that the program you execute doesn't have access to any files on
      the host machine. Create an empty temporary directory and `chroot` into it
      when executing the command. You'll need to copy the binary being executed
      too.

      {{#lang_is_nim}}
      Since Nim's [posix module](https://nim-lang.org/docs/posix.html) doesn't
      have `chroot` defined, you'll need to implement this yourself! For
      examples on how to do this, view the source for other syscalls like
      [chdir](https://nim-lang.org/docs/posix.html#chdir%2Ccstring).
      {{/lang_is_nim}}

      Just like the previous stage, the tester will run your program like this: 

      ```
      your_program run <some_image> <command> <arg1> <arg2>
      ```

      `<command>` will always be `/usr/local/bin/docker-explorer` for now.

    marketing_md: |
      In this stage, you'll restrict a program's access to the host filesystem
      by using [chroot](https://en.wikipedia.org/wiki/Chroot).

  - slug: "process_isolation"
    name: "Process isolation"
    description_md: |
      In the previous stage, we guarded against malicious activity by
      restricting an executable's access to the filesystem. 

      There's another resource that needs to be guarded: the process tree. The
      process you're executing is currently capable of viewing all other
      processes running on the host system, and sending signals to them.

      In this stage, you'll use [PID
      namespaces](http://man7.org/linux/man-pages/man7/pid_namespaces.7.html) to
      ensure that the program you execute has its own isolated process tree.
      The process being executed must see itself as PID 1.

      Just like the previous stage, the tester will run your program like this: 

      ```
      your_program run <some_image> <command> <arg1> <arg2>
      ```

    marketing_md: |
      In this stage, you'll restrict a program's access to the host's process
      tree by using [PID
      namespaces](http://man7.org/linux/man-pages/man7/pid_namespaces.7.html).

  - slug: "fetch_from_registry"
    name: "Fetch an image from the Docker Registry"
    description_md: |
      Your docker implementation can now execute a program with a fair degree of
      isolation - it can't modify files or interact with processes running on
      the host.

      In this stage, you'll use [the Docker registry
      API](https://docs.docker.com/registry/spec/api/) to fetch the contents of
      a public image on [Docker Hub](https://hub.docker.com/) and then execute a
      command within it.

      Just like the previous stage, the tester will run your program like this: 

      ```
      your_program run <some_image> <command> <arg1> <arg2>
      ```

      You'll need to:

      - Do a small authentication dance with the [registry API](https://docs.docker.com/registry/spec/api/)
      - Fetch the [image manifest](https://docs.docker.com/registry/spec/api/#pulling-an-image-manifest)
      - [Pull layers](https://docs.docker.com/registry/spec/api/#pulling-a-layer) of an image and extract them to the chroot directory

      {{#lang_is_go}}
      Since Go doesn't have an archive extraction utility in its stdlib, you
      might want to shell out and use `tar`.
      {{/lang_is_go}}

      {{#lang_is_nim}}
      Since Nim doesn't have an archive extraction utility in its stdlib, you
      might want to shell out and use `tar`.
      {{/lang_is_nim}}

    marketing_md: |
      In this stage, you'll fetch an image from Docker Hub and execute a command
      in it. You'll need to use [the Docker Registry
      API](https://docs.docker.com/registry/spec/api/) for this.
