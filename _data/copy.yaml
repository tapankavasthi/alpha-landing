heading_md: |
  Software Construction **Demystified**
subheading_md: |
  CodeCrafters is a set of **advanced** programming challenges where you build programming tools like Git, Redis and Docker from scratch.

  Tickle your fancy? 

learn_redis_internals_md: |
  For many of us, how Redis works under the hood is a mystery.

  - How do Redis clients communicate with a Redis server? 

  - How does Redis serve thousands of clients with a _single_ thread?

  - What exactly is this "event loop" that Redis uses? 

  If one really wanted to understand this tangled web of TCP servers, [events
  loops](https://en.wikipedia.org/wiki/Event_loop) and the [Redis
  protocol](https://redis.io/topics/protocol), these are some of the resources
  they'd probably look at:

  - [Official Redis Internals docs](https://redis.io/topics/internals) by
    Salvatore Sanfilippo

  - [Write your own Miniature Redis with
    Python](https://charlesleifer.com/blog/building-a-simple-redis-server-with-python/)
    by Charles Leifer

  - [Learn by building Redis with
    Ruby](https://www.pluralsight.com/courses/learn-by-building-redis-with-ruby)
    by Xavier Shay

  - [Build your own Redis](https://rohitpaulk.com/articles/redis-0) by Paul
    Kuruvilla

  As the author of the last item mentioned above and a reader of all other
  similar resources, I know that these aren't easy to follow. They're
  often theory-heavy with no code examples, or 2000 word+ series that can get
  hard to keep up with.

  Here's the part where I offer you a better solution. 

  The CodeCrafters' [Build your own Redis challenge](/challenges/redis) is a
  hands-on challenge where you'll learn Redis internals by _building_ a toy
  Redis implementation. The application you'll build will speak the Redis
  protocol, and will be capable of serving basic commands like PING, ECHO, SET
  and GET.

  <img class="course-preview" src="/images/redis_challenge_preview.png">

  You'll proceed stage by stage, starting with a basic TCP server and building
  up to a minimal-featured Redis implementation that can speak the Redis
  protocol. You'll submit code via a git push, and we'll stream test results
  directly to your terminal.

  You'll also get to chat & compete with like-minded folks in the process. (We
  run 1-week long sessions, attempt at your own pace)

  <img class="course-preview" src="/images/chat_preview.png" style="max-width: 450px;">

  Sounds like your jam? Signup below for early access!

learn_git_internals_md: |
  For many of us, how Git works under the hood is a mystery.

  - What is the `.git` directory used for?

  - What are Git objects? 

  - How does a Git client communicate with a Git server? 

  If one really wanted to understand this topic better, these are some of the
  resources they'd probably look at:

  - [The Pro Git book](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain) by
    Scott Chacon & Ben Straub

  - [Peepcode's Git Internals](https://github.com/pluralsight/git-internals-pdf)

  - [Rebuilding Git in Ruby](https://thoughtbot.com/blog/rebuilding-git-in-ruby)
    by Thoughtbot

  - [Write yourself a Git](https://wyag.thb.lt/) by Thibault Polge

  I've read _all_ of these, and I know that they aren't the easiest to follow.
  They're often theory-heavy with no code examples, or 2000 word+ series that
  can get hard to keep up with.

  Here's the part where I offer you a better solution. 

  The CodeCrafters' [Build your own Git challenge](/challenges/git) is a
  hands-on challenge where you'll learn Git internals by _building_ a small
  Git implementation. The application you build will be capable of cloning a public
  repository, committing changes and pushing them back to a Git server.

  <img class="course-preview" src="/images/git_challenge_preview.png">

  You'll proceed stage by stage, starting with simple stages like "Initialize a
  repository" and eventually building up to a minimal-featured Git
  implementation that can interact with a public repository. Along the way,
  you'll learn about the [`.git`
  directory](http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html),
  a few of Git's ["plumbing"
  commands](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain),
  [Git objects](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects)
  (blobs, commits, trees etc.), Git's [transfer
  protocols](https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols) and
  more.

  You're free to use any programming language of your choice,
  and work from the comfort of your own editor. Submit code via a git push once
  ready, and we'll stream test results directly to your terminal.

  You'll also get to chat & compete with like-minded folks in the process. (We
  run 1-week long sessions, attempt at your own pace)

  <img class="course-preview" src="/images/chat_preview.png" style="max-width: 450px;">

  Sounds like your jam? Checkout our [early access](/early-access) program!

learn_react_internals_md: |
  For many of us, how React works under the hood is a mystery.

  - What algorithm does React use to minimize DOM updates?

  - How are hooks implemented? 

  - How does `React.createElement` handle both plain HTML elements & React
    components?

  If one really wanted to understand this topic better, these are some of the
  resources they'd probably look at:

  - [Virtual DOM and Internals](https://reactjs.org/docs/faq-internals.html)

  - [Didact: A DIY Guide to build your own
    React](https://pomb.us/build-your-own-react/) by Rodrigo Pombo

  - [React
    Internals](https://www.mattgreer.org/articles/react-internals-part-one-basic-rendering/)
    by Matt Greer

  I've read _all_ of these, and I know that they aren't the easiest to follow.
  They're often theory-heavy with no code examples, or 2000 word+ series that
  can get hard to keep up with.

  Here's the part where I offer you a better solution. 

  [Build your own React](/challenges/react) is a hands-on challenge where you'll
  learn React internals by _building_ a small React implementation. The library
  you'll build will support function components, hooks and efficient DOM
  updates. To keep things simple, we'll leave a few details out, like React
  Fiber and class components.

  <img class="course-preview" src="/images/react_challenge_preview.png">

  You'll proceed stage by stage, starting with simple stages like "Create a
  simple HTML element" and eventually building up to a minimal-featured React
  implementation that can handle function components and hooks. Along the way,
  you'll learn about React's [API](https://reactjs.org/docs/react-api.html),
  [DOM-diffing
  algorithm](https://reactjs.org/docs/reconciliation.html#the-diffing-algorithm),
  [hooks](https://reactjs.org/docs/hooks-intro.html) and more!

  You'll be able to attempt this challenge in Javascript or Typescript. You'll
  work from the comfort of your own editor, submitting code via a Git push once
  ready. We'll stream helpful test results directly to your terminal.

  <img class="course-preview" src="/images/react_test_preview.png" style="max-width: 450px;">

  You'll also get to chat & compete with like-minded folks in the process. (We
  run 1-week long sessions, attempt at your own pace)

  <img class="course-preview" src="/images/chat_preview.png" style="max-width: 450px;">

  Sounds like your jam? Checkout our [early access](/early-access) program!

early_access_md: |
  Hi there, I'm [Paul](https://rohitpaulk.com). 
  
  [CodeCrafters](https://codecrafters.io) is currently under active development,
  but we've got the core challenge experience ready and are looking for early users
  who are brave enough to try it out.

  Here're the challenges we have lined up for testing:

    - [Build your own Redis](/challenges/redis)
    - [Build your own Docker](/challenges/docker)
    - [Build your own Git](/challenges/git) (coming soon)

  The kind of person we're looking for: 

  - Is interested in [Build Your Own
    X](https://github.com/danistefanovic/build-your-own-x) tutorials
  - Is an experienced programmer
  - Despises traditional algorithmic coding questions
  - Can spend 1-2 hours a week trying out challenges

  What you'll get:

  - Early access to challenges
  - A chance to vote on which challenges we'll work on next
  - Updates on CodeCrafters development activity
  - A variety of CodeCrafters badges, which'll be featured on your profile page
    once we launch
  - A bunch of CodeCrafters swag (T-shirts, stickers and more)


  Sounds like your cup of tea?

  We'd love to have you on-board.

early_access_stats:
  - number: 50+
    text: early access participants
  - number: 800+
    text: users enrolled for early access
  - number: 8
    text: early access trials completed
  - number: 1400+
    text: code submissions evaluated


faqs:
  - slug: when-will-i-receive-my-early-access-invite
    question: When will I receive my early access invite?
    content_md: |
      We're intentionally sending out invites slowly, so that we can work on
      feedback early before the next invites hit. The maximum delay we expect
      here is 1 month, not more.

      If a friend of yours received an invite earlier than you did and you want
      to take part in early access trials with them, you can [write to
      us](mailto:hello@codecrafters.io) and we'll fast-track your invite.

  - slug: why-does-my-early-access-invite-expire
    question: Why does my early access invite expire?
    content_md: |
      We set an expiry date on early access invites because we'd like to be able
      to predict how many people will join the community, to plan early access
      trials accordingly.

      If your invite expired and you'd still like to be part of the early access
      program, please [write to us](mailto:hello@codecrafters.io).

  - slug: what-is-an-early-access-trial
    question: What is an early access trial?
    content_md: |
      In early access trials, groups of 5-10 people attempt an upcoming challenge
      over a period of 2 weeks. We schedule these on our Discord server, which
      you'll gain access to once you get an early access invite.

      We use these trials to gain early feedback and iterate on challenges.

      When CodeCrafters launches, no participation data from these trials will
      be retained - we'll start from a clean slate.

  - slug: where-is-my-swag
    question: Where is my swag? 
    content_md: |
      We hand out T-shirts to the first 10 people to complete a challenge, and
      stickers to the first 100.

      If you’ve participated in an early access trial and completed the
      challenge, you’ll receive a message on Discord asking for your mailing
      address and T-shirt size preference. If this hasn’t happened, please [let
      us know](mailto:hello@codecrafters.io).

  - slug: what-all-languages-can-i-use
    question: What all languages can I use? 
    content_md: |
      As of now:
        
      - [Redis challenge](/challenges/redis): Python, Go, PHP, C, Ruby.

      - [Docker challenge](/challenges/docker): Go, Nim, C.

      We're always looking to add support for more languages. If you're part of
      [Early Access](/early-access), let us know what language you'd like added
      on our Discord server - and we'll try our best to support it in the next
      early access trial!

  - slug: where-is-my-profile-page
    question: Where is my profile page? 
    content_md: |
      If you've completed one or more challenges, you'll find your profile page
      at https://codecrafters.io/users/\<your_github_username\>.

      Profile pages might take upto 24 hours to sync. If you've completed a
      challenge recently and don't see your profile page yet, check back in 24
      hours.
