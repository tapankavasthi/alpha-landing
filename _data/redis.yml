slug: "redis"
name: "Redis"
description_md: |
  In this challenge, you'll build a toy Redis clone
  that's capable of handling basic commands like PING, GET
  and SET. Along the way, we'll learn about event loops, the Redis
  Protocol and more.

supported_languages: ["python", "go", "php", "c"]
starter_repos:
  python: https://github.com/codecrafters-io/redis-starter-python
  swift: https://github.com/codecrafters-io/redis-starter-swift
  go: https://github.com/codecrafters-io/redis-starter-go
  php: https://github.com/codecrafters-io/redis-starter-php
  c: https://github.com/codecrafters-io/redis-starter-c

marketing_intro_md: |
  In this challenge, you’ll build an application that can speak the Redis
  protocol, and is capable of serving basic commands like PING, ECHO, SET and
  GET. Along the way, you’ll learn about TCP servers, event loops and more.

  <img class="course-preview" src="/images/redis_challenge_preview.png">

stages:
  - slug: "init"
    name: "Bind to a port"
    description_md: |
      Let's start out with some basics.

      In this stage, CodeCrafters will try to bind to port 6379, which is the default
      port that Redis uses.

      Your task is to start a TCP server on port 6379. We'd like to make the first
      stage easy to pass, so we've included steps on how to pass this stage in the
      readme.
    marketing_md: |
      In this stage, you'll start a TCP server on port 6379, which is the
      default port that Redis uses.

  - slug: "ping-pong"
    name: "Respond to PING"
    description_md: |
      In this stage, you'll respond to the
      [PING](https://redis.io/commands/ping) command.

      Since the tester client _only_ sends `PING` at the moment, it's okay to
      ignore what the client sends and hardcode a response. We'll get to parsing
      client input in later stages.

      Keep in mind that Redis clients & servers speak the Redis protocol, so
      just sending "PONG" back won't suffice. You'll need to encode it as a
      [RESP simple
      string](https://redis.io/topics/protocol#resp-simple-strings).
    marketing_md: |
      In this stage, you'll respond to the
      [PING](https://redis.io/commands/ping) command. You'll use [the Redis
      protocol](https://redis.io/topics/protocol) to encode the reply. 

  - slug: "ping-pong-multiple"
    name: "Respond to multiple PINGs"
    description_md: |
      In this stage, you'll respond to multiple
      [PING](https://redis.io/commands/ping) commands, sent by the same client.

      You'll need to run a loop that reads input from a client and sends a
      response back.
    marketing_md: |
      In this stage, you'll respond to multiple
      [PING](https://redis.io/commands/ping) commands sent by the same client.

  - slug: "concurrent-clients"
    name: "Handle concurrent clients"
    description_md: |
      In this stage, your server will need to handle multiple concurrent
      clients. Just like the previous stages, all clients will only send `PING`
      commands for now.

      To achieve this, you'll need to either use threads, or, if you're feeling
      adventurous, an [Event Loop](https://en.wikipedia.org/wiki/Event_loop) (like
      the official Redis implementation does).
    marketing_md: |
      In this stage, you'll add support for multiple concurrent clients to your
      Redis server. To achieve this you'll use an [Event
      Loop](https://en.wikipedia.org/wiki/Event_loop),
      like the official Redis implementation does.

  - slug: "echo"
    name: "Implement the ECHO command"
    description_md: |
      In this stage, you'll respond to the
      [ECHO](https://redis.io/commands/echo) command.

      The client will send you the command as a RESP array, which looks
      something like this:

      ```
      *2\r\n$4\r\nECHO\r\n$3\r\nhey\r\n
      ```

      Seems confusing? Read up about [sending commands to a Redis
      server](https://redis.io/topics/protocol#sending-commands-to-a-redis-server).
    marketing_md: |
      In this stage, you'll respond to the
      [ECHO](https://redis.io/commands/echo) command. You'll parse user input
      according to the [the Redis protocol
      specification](https://redis.io/topics/protocol).

  # TODO: Change this to use hyphens
  - slug: "set_get"
    name: "Implement the SET & GET commands"
    description_md: |
      In this stage, you'll need to implement the
      [SET](https://redis.io/commands/set) &
      [GET](https://redis.io/commands/get) commands.
    marketing_md: |
      In this stage, you'll need to implement the
      [SET](https://redis.io/commands/set) &
      [GET](https://redis.io/commands/get) commands.

  - slug: "expiry"
    name: "Expiry"
    description_md: |
      In this stage, you'll need to support setting a key with an expiry. The
      expiry is provided using the "PX" argument to the
      [SET](https://redis.io/commands/set) command.
    marketing_md: |
      In this stage, you'll add support for setting a key with an expiry. The
      expiry is provided using the "PX" argument to the
      [SET](https://redis.io/commands/set) command.
